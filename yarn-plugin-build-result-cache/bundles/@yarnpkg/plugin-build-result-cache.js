/* eslint-disable */
//prettier-ignore
module.exports = {
name: "@yarnpkg/plugin-build-result-cache",
factory: function (require) {
"use strict";var plugin=(()=>{var b=Object.create;var l=Object.defineProperty;var E=Object.getOwnPropertyDescriptor;var g=Object.getOwnPropertyNames;var F=Object.getPrototypeOf,j=Object.prototype.hasOwnProperty;var f=(t=>typeof require<"u"?require:typeof Proxy<"u"?new Proxy(t,{get:(e,a)=>(typeof require<"u"?require:e)[a]}):t)(function(t){if(typeof require<"u")return require.apply(this,arguments);throw new Error('Dynamic require of "'+t+'" is not supported')});var x=(t,e)=>{for(var a in e)l(t,a,{get:e[a],enumerable:!0})},P=(t,e,a,n)=>{if(e&&typeof e=="object"||typeof e=="function")for(let i of g(e))!j.call(t,i)&&i!==a&&l(t,i,{get:()=>e[i],enumerable:!(n=E(e,i))||n.enumerable});return t};var v=(t,e,a)=>(a=t!=null?b(F(t)):{},P(e||!t||!t.__esModule?l(a,"default",{value:t,enumerable:!0}):a,t)),S=t=>P(l({},"__esModule",{value:!0}),t);var V={};x(V,{default:()=>R});var c=f("@yarnpkg/core");var r=f("@yarnpkg/fslib"),h=v(f("crypto"));async function y(t){let e=r.ppath.join(t,(0,r.toFilename)("ybrc.json"));if(await r.xfs.existsPromise(e))return JSON.parse(await r.xfs.readFilePromise(e,"utf-8"))}async function p(t,e){let a=await d(t,e),n=await K(t);await W(t,{key:a,value:n})}async function m(t,e){let a=await d(t,e),n=await k(t,a);return n?(await H(t,n.value),!0):!1}async function d(t,e){let a=r.ppath.join(t,(0,r.toFilename)("src")),n=await u(a),i={};for(let o of n){let s=await r.xfs.statPromise(o),C=r.ppath.relative(a,o);i[C]=await N(o)}return{fileHashes:i}}async function N(t){let e=h.default.createHash("md5"),a=await r.xfs.readFilePromise(t);return e.update(a),e.digest("base64")}async function K(t){let e=r.ppath.join(t,(0,r.toFilename)("bin")),a=await u(e),n={};for(let i of a){let o=r.ppath.relative(e,i);n[o]=await r.xfs.readFilePromise(i,"utf8")}return{fileContents:n}}async function W(t,e){let a=Date.now().toString()+".json",n=JSON.stringify(e),i=r.ppath.join(t,(0,r.toFilename)(".build-result-cache"));await r.xfs.mkdirPromise(i,{recursive:!0});let o=r.ppath.join(i,(0,r.toFilename)(a));await r.xfs.writeFilePromise(o,n)}async function k(t,e){let a=r.ppath.join(t,(0,r.toFilename)(".build-result-cache"));if(!await r.xfs.existsPromise(a))return;let n=await u(a);for(let i of n){let o=await r.xfs.readFilePromise(i,"utf8"),s=JSON.parse(o);if(D(e,s.key))return s}}function D(t,e){return JSON.stringify(t)===JSON.stringify(e)}async function H(t,e){let a=r.ppath.join(t,(0,r.toFilename)("bin"));for(let[n,i]of Object.entries(e.fileContents)){let o=r.ppath.join(a,n),s=r.ppath.dirname(o);await r.xfs.mkdirPromise(s,{recursive:!0}),await r.xfs.writeFilePromise(o,i)}}async function u(t){let e=[],a=await r.xfs.readdirPromise(t);for(let n of a){let i=r.ppath.join(t,n),o=await r.xfs.statPromise(i);o.isFile()?e.push(i):o.isDirectory()&&e.push(...await u(i))}return e}async function w(t,e){let a=c.Configuration.create(t.cwd);await c.StreamReport.start({configuration:a,includeFooter:!1,stdout:t.stdout},async n=>{n.reportInfo(c.MessageName.UNNAMED,e)})}var O=async(t,e,a,n,i)=>{let o=await y(i.cwd);return o&&o.scriptsToCache.includes(n)?async()=>{if(await m(i.cwd,e))return await w(i,"Restored from cache!"),Promise.resolve(0);{let s=await t();return s===0&&(await p(i.cwd,e),await w(i,"Cache updated!")),s}}:t},J={hooks:{wrapScriptExecution:O}},R=J;return S(V);})();
return plugin;
}
};
